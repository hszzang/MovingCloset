<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="mybatis.MybatisProductImpl">

	<select id="getProductDTO" resultType="mybatis.ProductDTO">
		SELECT * FROM product WHERE p_idx=#{p_idx}
	</select>
	
	<!-- 리스트 (전체최근순) -->
	<select id="getStoreList" parameterType="int" resultType="mybatis.ProductDTO">
		SELECT * FROM product 
		ORDER BY p_idx DESC
		<!-- WHERE p_idx<![CDATA[>=]]>#{defaultShow} -->
	</select>

	<!-- 페이징 적용된 리스트 + 신상품/가격정렬 + 플래그 분류 적용 -->
	<select id="getPagedList" resultType="mybatis.ProductDTO">  
		SELECT * FROM (
				    SELECT ROW_NUMBER() OVER(ORDER BY p_idx) NUM, A.*
				    FROM product A 
					<choose>
						<when test='flag == null or flag=="all"'>
							WHERE p_flag !='뉴디'
						</when>
						<when test='flag!=null'>
							 WHERE p_flag=#{flag}
						</when>
					</choose>
					<choose>
					<when test='order=="asc"'>
						ORDER BY p_price ASC
					</when>
					<when test='order=="desc"'>
						ORDER BY p_price DESC
					</when>
					<otherwise>
						ORDER BY p_idx DESC
					</otherwise>
				</choose>
				 )
				WHERE 
				NUM BETWEEN #{start} AND #{end}
	</select>	
	<!-- 
		<choose>
			<when test='flag == null or flag=="all"'>
				SELECT * FROM (
				    SELECT ROW_NUMBER() OVER(ORDER BY p_idx) NUM, A.*
				    FROM product A 
				    WHERE p_flag !='뉴디'
				    ORDER BY p_idx DESC
				    )
				WHERE 
				NUM BETWEEN #{start} AND #{end}
			</when>
			<when test='flag!=null'>
				SELECT * FROM (
				    SELECT ROW_NUMBER() OVER(ORDER BY p_idx) NUM, A.*
				    FROM product A 
				    WHERE p_flag=#{flag}
				    ORDER BY p_idx DESC
				    )
				WHERE 
				NUM BETWEEN #{start} AND #{end}
			</when>
		</choose>
		 -->
	<!-- 
			SELECT * FROM (
				SELECT Tb.*, ROWNUM rNum FROM(
					SELECT * FROM product
				<choose>
					<when test='flag == null or flag=="all"'>
						WHERE p_flag!='뉴디'
					</when>
					<when test='flag!=null'>
						WHERE p_flag=#{flag}
					</when>
				</choose>
				<choose>
					<when test='order!=null'>
						ORDER BY #{order}
					</when>
					<otherwise>
						ORDER BY p_idx DESC
					</otherwise>
				</choose>
				)Tb
			)
			WHERE rNum BETWEEN #{start} AND #{end}	
	
		<choose>
			<when test='flag == null or flag=="all"'>
				SELECT * FROM ( 		
				    SELECT Tb.*, ROWNUM rNum FROM ( 
				        SELECT * FROM product
				        	WHERE p_flag!='뉴디'
							ORDER BY #{order}
						)Tb
				    ) 
					WHERE rNum BETWEEN #{start} AND #{end}	
			</when>
			<when test='flag!=null'>
				SELECT * FROM ( 		
				    SELECT Tb.*, ROWNUM rNum FROM ( 
				        SELECT * FROM product
				        	WHERE p_flag=#{flag}
							ORDER BY #{order}
						)Tb
				    ) 
				WHERE rNum BETWEEN #{start} AND #{end}
			</when>
		</choose>
	 -->
		<!--  
		<choose>
			<when test='order=="asc"'>
				ORDER BY p_price ASC
			</when>
			<when test='order=="desc"'>
				ORDER BY p_price DESC
			</when>
			<otherwise>
				ORDER BY p_idx DESC
			</otherwise>
		</choose>
		-->
			<!-- 
				SELECT * FROM product 
				WHERE p_flag!='뉴디'
				AND 
				p_idx BETWEEN #{start} AND #{end}
				
				SELECT
				ROW_NUMBER() OVER(ORDER BY p_idx DESC) 
				rNum,
				p_idx,p_name,p_code,p_price,p_brand,p_ofile,p_sfile,p_flag
				FROM product 
				WHERE p_flag!='뉴디' 
				AND
				rownum BETWEEN 1 AND 60 ;
			 -->
			<!--  
				SELECT * FROM
					(SELECT * FROM product
						WHERE p_flag=#{flag}
						AND
						p_idx BETWEEN #{start} AND #{end}
						ORDER BY p_idx DESC
					)
				WHERE rownum BETWEEN 1 AND 60	
					
			<when test='flag=="신발" and order!=null'> 
				SELECT
			    ROW_NUMBER() OVER(ORDER BY p_price #{order}) 
			    row_num,
			    p_idx,p_name,p_code,p_price,p_brand,p_ofile,p_sfile,p_flag
				FROM
			    product WHERE p_flag=#{flag}
			
				SELECT * FROM 
				 (
				  SELECT * FROM product
				  WHERE p_flag=#{flag}
				  ORDER BY p_idx DESC
				 )
				WHERE ROWNUM BETWEEN 1 AND 60;
			
			</when>
			
				SELECT * FROM 
				 (
				  SELECT * FROM product
				  WHERE p_flag=#{flag}
				  ORDER BY p_idx DESC
				 )
				WHERE ROWNUM BETWEEN 1 AND 60;
			
			</when>
			<otherwise> 
				SELECT * FROM
					(SELECT * FROM product
						WHERE p_flag=#{flag}
						ORDER BY p_idx DESC
					)
				WHERE rownum BETWEEN #{start} AND #{end}		
			</otherwise>
			-->	

	
<!-- 페이징 위한 갯수 카운트 플래그 없으면 모든 상품, 플래그 있으면 해당 플래그 상품만 -->
	<select id="getCount" parameterType="String" resultType="int">
		<choose>
			<when test='flag==null or flag=="all"'>
				SELECT COUNT(*) FROM product WHERE p_flag!='뉴디'
			</when>
			<otherwise>
				SELECT COUNT(*) FROM product WHERE p_flag=#{flag}
			</otherwise>
		</choose>
	</select>
		
	<!-- 정렬 높은 가격 순 -->
	<select id="descPrice" resultType="mybatis.ProductDTO">
		SELECT * FROM product ORDER BY p_price DESC
	</select>
	<!-- 정렬 낮은 가격 순 -->
	<select id="ascPrice" resultType="mybatis.ProductDTO">
		SELECT * FROM product ORDER BY p_price ASC
	</select>
	
	<!-- 상품 입력 -->
	<insert id="insertProduct" parameterType="mybatis.ProductDTO" >
		INSERT INTO product(p_idx, p_name, p_code, p_price, p_brand, p_ofile, p_sfile, p_flag)
		VALUES
		(product_seq.nextval, #{p_name}, #{p_code}, #{p_price}, #{p_brand}, #{p_ofile}, #{p_sfile}, #{p_flag})
	</insert>
	<!-- 디테일 입력 -->
	<insert id="insertDetail" parameterType="mybatis.ProductDetailDTO">
		INSERT INTO product_detail(p_code, pd_color, pd_size, pd_stock)
		VALUES (#{p_code}, #{pd_color}, #{pd_size}, #{pd_stock})
	</insert>
	
	<!-- product 에서 상세정보 가져오기 -->
	<select id="getStoreDetail" resultType="mybatis.ProductDTO">
		SELECT * FROM product WHERE p_idx=#{p_idx}
	</select>
	<!-- product_detail 에서 상세정보 사이즈 가져오기 -->
	<select id="getProductDetail" resultType="mybatis.ProductDetailDTO">
		SELECT * FROM product_detail WHERE p_code=#{p_code}
	</select>
	
	<!-- 상품 수정 -->
	<update id="updateProduct" parameterType="mybatis.ProductDTO" >
		UPDATE product SET p_name=#{p_name}, p_code=#{p_code}, p_price=#{p_price}, p_brand=#{p_brand}, p_ofile=#{p_ofile}, p_sfile=#{p_sfile} WHERE p_idx=#{p_idx}
	</update>
	<!-- 디테일 수정 -->
	<update id="updateDetail" parameterType="mybatis.ProductDetailDTO">
		UPDATE product_detail SET pd_color=#{pd_color}, pd_size=#{pd_size}, pd_stock=#{pd_stock} WHERE p_code=#{p_code}
	</update>
	
	<!-- 상품 삭제 -->
	<delete id="deleteProduct">
		DELETE FROM product WHERE p_idx=#{p_idx}
	</delete>
	<!-- 디테잏 삭제 -->
	<delete id="deleteDetail">
		DELETE FROM product_detail WHERE p_code=#{p_code}
	</delete>

	<!-- 리뷰들 불러오기 -->
	<select id="getReviews" resultType="mybatis.ReviewDTO">
		SELECT * FROM review WHERE p_code=#{p_code}
	</select>
	
	<!-- 리뷰쓰기 -->
	<insert id="insertReview" parameterType="mybatis.ReviewDTO" >
		INSERT INTO review(p_code, r_rate, r_content, userid, r_date, r_ofile, r_sfile, r_idx, rt_fabric, rt_fit, rt_size, rt_finish)
		VALUES
		(#{p_code}, #{r_rate}, #{r_content}, #{userid}, sysdate, #{r_ofile}, #{r_sfile}, review_seq.nextval, #{rt_fabric}, #{rt_fit}, #{rt_size}, #{rt_finish})
	</insert>

	<!-- 리뷰쓰기(첨부파일 없음) -->
	<insert id="insertReviewNoFile" parameterType="mybatis.ReviewDTO" >
		INSERT INTO review(p_code, r_rate, r_content, userid, r_date, r_idx, rt_fabric, rt_fit, rt_size, rt_finish)
		VALUES
		(#{p_code}, #{r_rate}, #{r_content}, #{userid}, sysdate, review_seq.nextval, #{rt_fabric}, #{rt_fit}, #{rt_size}, #{rt_finish})
	</insert>

	
	
	<!-- 리뷰 수정 -->
	<update id="updateReview" parameterType="mybatis.ReviewDTO">
		UPDATE review 
		SET r_content=#{r_content}, r_ofile=#{r_ofile}, r_sfile=#{r_sfile}
		WHERE p_code=#{p_code}, r_idx=#{r_idx} AND userid=#{userid}
	</update>
	
	<!-- 리뷰 삭제 -->
	<delete id="deleteReview">
		<!--  DELETE FROM review WHERE p_code=#{p_code}, r_code=#{r_code} AND userid=#{userid} -->
		DELETE FROM review WHERE r_idx=#{0}
	</delete>
	<select id="getPidx" >
		SELECT p_idx FROM product WHERE p_code=#{0}
	</select>
	
	
	<!-- 리뷰 페이지 진입시 띄울 정보 가져오기 -->
	<select id="reviewList" resultType="mybatis.ProductAndDetailDTO">
	 	SELECT * FROM product p INNER JOIN product_detail pd
   	 	ON p.p_code = pd.p_code WHERE p_idx = #{p_idx}
	</select>
	
	<!-- 구매내역과 리뷰페이지 버튼 보임/숨김 처리 연결 -->
	
	<select id="buyReview" resultType="mybatis.BuyAndGroupDTO">
	SELECT distinct bg.p_code as p_code, userid
	FROM product_detail P
	    INNER JOIN buy_group bg
	    ON P.p_code = bg.p_code
	    INNER JOIN buy b
	    ON bg.b_idx = b.b_idx
	WHERE userid = #{0} and bg.p_code = #{1}
	</select>
	
	

	
	
</mapper>