<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- 
		프로젝트 생성시 기본적으로 제공되는 ViewResolver로 컨트롤러가
		반환하는 뷰의 경로를 조립하는 역할을 담당한다. 
		타일즈의 ViewResolver가 먼저 호출될수 있도록 order프로퍼티를
		추가하여 2로 설정한다.
	-->
	<beans:bean id="viewResolver" 
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	
	<!-- 
		Maven : spring-webmvc.jar 
		타일즈에서 제공하는 ViewResolver가 먼저 호출되게 하여 템플릿을 통한
		레이아웃을 먼저 설정할 수 있도록 해준다. 따라서 order프로퍼티를
		추가하여 1로 설정한다.
	-->
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />	
	</beans:bean>
	
	<!--  
		타일즈 설정 파일의 위치를 설정한다.

	--> 
	<beans:bean id="titlesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions" >
			<beans:list>
				<beans:value>/WEB-INF/spring/tiles-define.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	
	<context:component-scan base-package="com.project.movingcloset" />
	<!-- 
	기본패키지를 추가.
	요청이 들어왔을때 기본패키지로 지정된 곳에서 매핑 정보를 찾는다. 	
	-->
	<context:component-scan base-package="movingcloset" />
	
		<!-- DB연결 정보를 가진 데이터 소스 빈 -->
	<beans:bean name="dataSource" 
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<beans:property name="username" value="MovingCloset" />
		<beans:property name="password" value="1234" />
	</beans:bean>
	
	<!-- Mybatis 사용을 위한 빈 생성 -->
	<beans:bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<!-- mapper의 위치 설정 : mybatis.mapper 패키지 하위의 모든 xml 파일 -->
		<beans:property name="mapperLocations" 
			value="classpath:mybatis/mapper/*.xml" />
	</beans:bean>
	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory" />	
	</beans:bean>   
	 
	 <!-- 파일업로드 빈  -->
	 <beans:bean id="multipartResolver"
	 	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	 	<beans:property name="maxUploadSize" value="1000000" />	
	 </beans:bean> 
	 <!-- 파일다운로드 빈 
	 <beans:bean id="fileDownloadView" class="common.FileDownLoadView" />
	 <beans:bean id="fileViewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
	 	<beans:property name="order" value="0" />
	 </beans:bean>
	 -->
	 
	 
</beans:beans>